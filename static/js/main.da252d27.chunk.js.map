{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","utils/normalizeMovieData.ts","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","addMovie","useState","inputValue","setInputValue","setMovie","isLoading","setIsLoading","error","setError","onSubmit","event","query","preventDefault","fetch","then","res","json","catch","Response","Error","data","Title","Plot","Poster","imdbID","normalizeMovieData","finally","htmlFor","type","id","placeholder","classNames","value","onChange","target","disabled","onClick","App","setMovies","length","some","item","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.da252d27.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\nimport { getMovie } from '../../api';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\nimport { normalizeMovieData } from '../../utils/normalizeMovieData';\n\ntype Props = {\n  addMovie: (movie: Movie) => void;\n};\n\nexport const FindMovie: React.FC<Props> = ({ addMovie }) => {\n  const [inputValue, setInputValue] = useState('');\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  function handleInput(event: React.ChangeEvent<HTMLInputElement>) {\n    setInputValue(event.target.value);\n    setError(false);\n  }\n\n  function reset() {\n    setError(false);\n    setInputValue('');\n    setIsLoading(false);\n    setMovie(null);\n  }\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n    setIsLoading(true);\n    getMovie(inputValue)\n      .then(data => {\n        if ('Title' in data) {\n          setMovie(normalizeMovieData(data));\n        }\n\n        if ('Error' in data) {\n          setError(true);\n        }\n      })\n      .catch(() => setError(true))\n      .finally(() => setIsLoading(false));\n  }\n\n  function handleAdd() {\n    if (movie) {\n      addMovie(movie);\n    }\n\n    reset();\n  }\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={handleSubmit}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames('input', { 'is-danger': error })}\n              value={inputValue}\n              onChange={handleInput}\n            />\n          </div>\n\n          {error && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={\n                classNames('button', 'is-light', { 'is-loading': isLoading })\n              }\n              disabled={!inputValue}\n            >\n              {!movie ? 'Find a movie' : 'Search again'}\n            </button>\n          </div>\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleAdd}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=ed9be479';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { Movie } from '../types/Movie';\nimport { MovieData } from '../types/MovieData';\n\nexport function normalizeMovieData(data: MovieData): Movie {\n  return {\n    title: data.Title,\n    description: data.Plot,\n    imgUrl: data.Poster === 'N/A'\n      ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n      : data.Poster,\n    imdbUrl: `https://www.imdb.com/title/${data.imdbID}`,\n    imdbId: data.imdbID,\n  };\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const addMovie = (movie: Movie) => {\n    if (!movies.some(item => item.imdbId === movie.imdbId)) {\n      setMovies([...movies, movie]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        {!!movies.length && <MoviesList movies={movies} />}\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie addMovie={(movie:Movie) => addMovie(movie)} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}